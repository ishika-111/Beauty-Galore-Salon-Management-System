generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String?
  password  String
  role      Role    @default(USER)
  isVerified Boolean @default(false)
  verificationToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resetPasswordToken String?  
  resetPasswordTokenExpiry DateTime? 
  products Product[]
  orders   Order[]
  refreshToken RefreshToken[]
  appointments Appointment[]
  staff    Staff?
  cartItems           Cart[]   
  Customer           Customer[]
    payments          Payment[]    // Added this line for payments

}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String   @unique
  dob       DateTime
  gender    String
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
}


model RefreshToken {
    id     Int    @id @default(autoincrement())
    token  String @unique
    userId Int
    user   User   @relation(fields: [userId], references: [id])
}

model Staff {
  id       Int    @id @default(autoincrement())
  name     String
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
}

model Admin {
  id       Int   @id @default(autoincrement())
  email    String   @unique
  name     String?
  password String
}

model Appointment {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  phone   String
  date    String   // Store date as String (e.g., "2025-03-12")
  time    String   // Store time as "HH:mm"
  service String
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      
  @@unique([date, time]) // Prevent duplicate bookings for the same time slot
}

model Product {
  id            String        @id @default(uuid())
  name          String
  description   String?
  price         Float
  available     Boolean       @default(true)
  imageUrl      String?
  user          User[]        // Users who own the product
  cartItems     Cart[]   
  orderItems    OrderItem[]   // <-- Add this line to complete the relation
}


model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  @@unique([userId, productId]) // Ensures a user can only have one cart entry per menu item
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int      // Foreign key
  totalAmount     Float
  paymentMethod   String
  address         String
  orderType       String
  status          String
  deliveryCharge  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])  // Add this line to define the opposite relation
  items           OrderItem[]
    payment        Payment?

}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId    String  // Changed productId to menuId for consistency
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}
model Payment {
  id             Int      @id @default(autoincrement())
  method         String   // 'Esewa', 'COD', etc.
  transactionId  String   @unique
  amount         Float
  status         String   // 'success', 'failed'
  createdAt      DateTime @default(now())
  orderId        Int      @unique
  order          Order    @relation(fields: [orderId], references: [id])
  userId         Int      
  user           User     @relation(fields: [userId], references: [id]) // Link to User model
}




enum Role {
  USER
  STAFF
}

enum OrderType {
  PICKUP
  DELIVERY
}
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
  DELIVERED
}

